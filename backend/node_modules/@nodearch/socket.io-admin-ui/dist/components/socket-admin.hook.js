var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { AppContext, Hook, Logger } from '@nodearch/core';
import { SocketIOAdminUIConfig } from './socket-admin.config.js';
import { instrument } from '@socket.io/admin-ui';
let SocketAdminHook = class SocketAdminHook {
    constructor(appContext, config, logger) {
        this.appContext = appContext;
        this.config = config;
        this.logger = logger;
    }
    async onStart() {
        if (!this.config.enable)
            return;
        const serverProvider = this.appContext.getContainer().get(this.config.server);
        if (!serverProvider)
            throw new Error('Socket.IO Server Provider not found. Admin UI cannot be started.');
        this.logger.info('Enabling Socket.IO Admin UI');
        const io = serverProvider.get();
        instrument(io, this.config.options);
    }
};
SocketAdminHook = __decorate([
    Hook({ export: true }),
    __metadata("design:paramtypes", [AppContext,
        SocketIOAdminUIConfig,
        Logger])
], SocketAdminHook);
export { SocketAdminHook };
//# sourceMappingURL=socket-admin.hook.js.map