import { ClassInfo } from '../utils/class-info.js';
import { ComponentFactory } from './component-factory.js';
import { CoreDecorator, DecoratorType } from './enums.js';
import { ComponentMetadata } from './metadata.js';
export class ComponentInfo {
    constructor(classConstructor, registration, container) {
        this.classConstructor = classConstructor;
        this.registration = registration;
        this.decorators = ComponentMetadata.getComponentDecorators(classConstructor);
        this.container = container;
        this.methods = ClassInfo.getMethods(classConstructor);
    }
    getDecorators(options = {}) {
        let decorators = [...this.decorators];
        if (options.placement && options.placement.length) {
            const placement = options.placement;
            decorators = decorators.filter(deco => {
                return placement.includes(this.getDecoratorPlacement(deco));
            });
        }
        if (options.method) {
            decorators = decorators.filter(deco => {
                return deco.method === options.method;
            });
        }
        if (options.id) {
            decorators = decorators.filter(deco => {
                return deco.id === options.id;
            });
        }
        if (options.useId) {
            decorators = decorators.filter(deco => {
                return deco.id === CoreDecorator.USE && ComponentFactory.isComponent(deco.data.component, options.useId);
            });
        }
        return decorators;
    }
    getDecoratorsIds() {
        return this.decorators.map(deco => deco.id);
    }
    getRegistration() {
        return this.registration;
    }
    getClass() {
        return this.classConstructor;
    }
    getInstance() {
        return this.container.get(this.classConstructor);
    }
    getMethods() {
        return this.methods;
    }
    getId() {
        return this.registration.id;
    }
    getOptions() {
        return this.registration.options || {};
    }
    getData() {
        return this.registration.data;
    }
    getDependencies() {
        return this.registration.dependencies;
    }
    getName() {
        return this.classConstructor.name;
    }
    isExported() {
        return this.registration.options?.export;
    }
    getDecoratorPlacement(deco) {
        if (deco.type === DecoratorType.CLASS_METHOD) {
            return deco.method ? DecoratorType.METHOD : DecoratorType.CLASS;
        }
        else {
            return deco.type;
        }
    }
}
//# sourceMappingURL=component-info.js.map