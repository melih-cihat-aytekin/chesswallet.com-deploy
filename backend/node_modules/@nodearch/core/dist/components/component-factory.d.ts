import { ClassConstructor } from '../utils/types.js';
import { IDecoratorDependency, IComponentOptions } from './interfaces.js';
export declare class ComponentFactory {
    static componentDecorator<T>(options: {
        id: string;
        options?: IComponentOptions;
        fn?(target: any): T | void;
        dependencies?: ClassConstructor[];
    }): ClassDecorator;
    static classDecorator<T>(options: {
        id: string;
        fn?(target: any): T | void;
        dependencies?: ClassConstructor[];
    }): ClassDecorator;
    static methodDecorator<T>(options: {
        id: string;
        fn?(target: any, propKey: string | symbol, descriptor: PropertyDescriptor): T | void;
        dependencies?: ClassConstructor[];
    }): MethodDecorator;
    static parameterDecorator<T>(options: {
        id: string;
        fn?(target: any, propKey: string | symbol | undefined, paramIndex: number): T | void;
        dependencies?: ClassConstructor[];
    }): ParameterDecorator;
    static classMethodDecorator<T>(options: {
        id: string;
        fn?(target: any, propKey?: string | symbol): T | void;
        dependencies?: ClassConstructor[];
    }): (target: any, propKey?: string | symbol) => void;
    static isComponent(component: any, id?: string): boolean;
    static getDecoratorInfo(classConstructor: ClassConstructor, id: string): import("./interfaces.js").IComponentDecorator[];
    private static getComponentDependencies;
    static addComponentDependencies(component: ClassConstructor, dependencies: ClassConstructor[]): IDecoratorDependency[];
}
//# sourceMappingURL=component-factory.d.ts.map