import { Container } from '../container/container.js';
import { ClassConstructor } from '../utils/types.js';
import { IComponentDecorator, IGetDecoratorsOptions } from './interfaces.js';
import { IComponentRegistration } from './interfaces.js';
export declare class ComponentInfo<T = any, D = any> {
    private classConstructor;
    private registration;
    private decorators;
    private container;
    private methods;
    constructor(classConstructor: ClassConstructor, registration: IComponentRegistration, container: Container);
    getDecorators<D = any>(options?: IGetDecoratorsOptions): IComponentDecorator<D>[];
    getDecoratorsIds(): string[];
    getRegistration(): IComponentRegistration<D>;
    getClass(): ClassConstructor<T>;
    getInstance(): T;
    getMethods(): string[];
    getId(): string;
    getOptions(): import("./interfaces.js").IComponentOptions;
    getData(): D | undefined;
    getDependencies(): import("./interfaces.js").IDecoratorDependency[] | undefined;
    getName(): string;
    isExported(): boolean | undefined;
    private getDecoratorPlacement;
}
//# sourceMappingURL=component-info.d.ts.map