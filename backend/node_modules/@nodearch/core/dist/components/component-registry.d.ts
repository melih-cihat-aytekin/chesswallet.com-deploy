import { Container } from '../container/container.js';
import { ClassConstructor } from '../utils/types.js';
import { ComponentInfo } from './component-info.js';
import { IComponentDecoratorInfo, IGetComponentsOptions, IGetDecoratorsOptions } from './interfaces.js';
export declare class ComponentRegistry {
    private container;
    private registeredComponents;
    private componentBinder;
    constructor(container: Container);
    get<T = any, D = any>(options?: IGetComponentsOptions): ComponentInfo<T, D>[];
    getInfo<T, D>(component: ClassConstructor | object): ComponentInfo<T, D>;
    getDecorators<T = any>(options?: IGetDecoratorsOptions): IComponentDecoratorInfo<T>[];
    getExported(): ComponentInfo<any, any>[];
    register(classes: ClassConstructor[]): void;
    registerExtension(componentRegistry: ComponentRegistry, extContainer: Container): void;
    count(): number;
    private getComponents;
    private filterComponentsByDecoratorIds;
}
//# sourceMappingURL=component-registry.d.ts.map