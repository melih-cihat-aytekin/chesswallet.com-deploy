import { ConsoleLogger } from './console/console-logger.js';
import { LogLevel } from './enums.js';
export class Logger {
    constructor(loggingOptions) {
        this.logLevelPriority = [
            LogLevel.Error,
            LogLevel.Warn,
            LogLevel.Info,
            LogLevel.Debug
        ];
        this.loggerHandler = loggingOptions?.logger ? new loggingOptions.logger : new ConsoleLogger({ disableColors: loggingOptions?.disableColors });
        this.logLevel = loggingOptions?.logLevel || LogLevel.Info;
        this.getTimestamp = loggingOptions?.getTimestamp || this.defaultGetTimestamp;
        this.isDisabled = loggingOptions?.disable === undefined ? false : loggingOptions?.disable;
        this.prefix = loggingOptions?.prefix;
    }
    error(...args) {
        this.writeLogs(LogLevel.Error, args);
    }
    warn(...args) {
        this.writeLogs(LogLevel.Warn, args);
    }
    info(...args) {
        this.writeLogs(LogLevel.Info, args);
    }
    debug(...args) {
        this.writeLogs(LogLevel.Debug, args);
    }
    setLogLevel(logLevel) {
        this.logLevel = logLevel;
    }
    getLogLevel() {
        return this.logLevel;
    }
    defaultGetTimestamp() {
        return new Date().toISOString();
    }
    writeLogs(logLevel, args) {
        if (this.logEnabled(logLevel)) {
            this.loggerHandler.log({
                logLevel,
                args,
                timestamp: this.getTimestamp(),
                prefix: this.prefix
            });
        }
    }
    logEnabled(logLevel) {
        return !this.isDisabled && this.getPriority(this.logLevel) >= this.getPriority(logLevel);
    }
    getPriority(logLevel) {
        return this.logLevelPriority.indexOf(logLevel);
    }
}
//# sourceMappingURL=logger.js.map