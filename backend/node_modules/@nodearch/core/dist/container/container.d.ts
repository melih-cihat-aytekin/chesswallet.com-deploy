import inversify from 'inversify';
import { ClassConstructor } from '../utils/types.js';
import { IBindComponentOptions } from './interfaces.js';
export declare class Container {
    private inversifyContainer;
    constructor(inversifyContainer: inversify.Container);
    bindConstant<T>(componentClass: ClassConstructor<T>, value: T): void;
    bindDynamic<T>(componentClass: ClassConstructor<T>, value: () => T): void;
    bindComponent<T>(options: IBindComponentOptions<T>): void;
    bindExtensionComponent<T>(options: IBindComponentOptions<T>, extContainer: Container): void;
    getByNamespace<T>(namespace: string): T[];
    getById<T>(id: string): T[];
    get<T>(component: ClassConstructor<T>): T | undefined;
    override<T>(component: ClassConstructor<T>, value: T): void;
    snapshot(): void;
    restore(): void;
    clearCache(): void;
    clone(): Container;
    private bindClass;
    private bindIdToComponent;
    private bindNamespacesToComponent;
    private activationHandlerWrap;
    private deactivationHandlerWrap;
    private getAll;
    private getComponentGroupId;
    static getNamespaceId(namespace: string): string;
}
//# sourceMappingURL=container.d.ts.map