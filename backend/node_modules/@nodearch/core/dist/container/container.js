import inversify from 'inversify';
import { DependencyException } from '../errors.js';
import { ComponentScope } from '../components/enums.js';
export class Container {
    constructor(inversifyContainer) {
        this.inversifyContainer = inversifyContainer;
    }
    bindConstant(componentClass, value) {
        this.inversifyContainer.bind(componentClass).toConstantValue(value);
    }
    bindDynamic(componentClass, value) {
        this.inversifyContainer.bind(componentClass).toDynamicValue(value);
    }
    bindComponent(options) {
        const binding = this.bindClass(options.componentClass, options.scope);
        if (options.onActivation) {
            options.onActivation.forEach(handler => {
                binding.onActivation(this.activationHandlerWrap(handler));
            });
        }
        if (options.onDeactivation) {
            options.onDeactivation.forEach(handler => {
                binding.onDeactivation(this.deactivationHandlerWrap(handler));
            });
        }
        if (options.id) {
            this.bindIdToComponent(options.componentClass, options.id);
        }
        if (options.namespace) {
            this.bindNamespacesToComponent(options.componentClass, options.namespace);
        }
    }
    bindExtensionComponent(options, extContainer) {
        this.bindDynamic(options.componentClass, () => {
            return extContainer.get(options.componentClass);
        });
        if (options.id) {
            this.bindIdToComponent(options.componentClass, options.id);
        }
        if (options.namespace) {
            this.bindNamespacesToComponent(options.componentClass, options.namespace);
        }
    }
    getByNamespace(namespace) {
        return this.getAll(Container.getNamespaceId(namespace));
    }
    getById(id) {
        return this.getAll(this.getComponentGroupId(id));
    }
    get(component) {
        try {
            return this.inversifyContainer.get(component);
        }
        catch (e) {
            if (e.message !== `No matching bindings found for serviceIdentifier: ${component}`) {
                throw new DependencyException(e.message);
            }
        }
    }
    override(component, value) {
        this.inversifyContainer.rebind(component).toConstantValue(value);
    }
    snapshot() {
        this.inversifyContainer.snapshot();
    }
    restore() {
        this.inversifyContainer.restore();
    }
    clearCache() {
        const compsMap = this.inversifyContainer._bindingDictionary._map;
        compsMap.forEach(comps => {
            comps.forEach(comp => {
                if (comp.type === 'Instance') {
                    comp.cache = null;
                    comp.activated = false;
                }
            });
        });
    }
    clone() {
        const inversifyContainer = inversify.Container.merge(this.inversifyContainer, new inversify.Container());
        return new Container(inversifyContainer);
    }
    bindClass(componentClass, scope) {
        let binding;
        if (scope === ComponentScope.SINGLETON) {
            binding = this.inversifyContainer.bind(componentClass).toSelf().inSingletonScope();
        }
        else if (scope === ComponentScope.TRANSIENT) {
            binding = this.inversifyContainer.bind(componentClass).toSelf().inTransientScope();
        }
        else if (scope === ComponentScope.REQUEST) {
            binding = this.inversifyContainer.bind(componentClass).toSelf().inRequestScope();
        }
        else {
            binding = this.inversifyContainer.bind(componentClass).toSelf();
        }
        return binding;
    }
    bindIdToComponent(componentClass, id) {
        this.inversifyContainer.bind(this.getComponentGroupId(id)).toService(componentClass);
    }
    bindNamespacesToComponent(componentClass, namespaces) {
        namespaces = namespaces ? (Array.isArray(namespaces) ? namespaces : [namespaces]) : [];
        namespaces.forEach(ns => {
            this.inversifyContainer.bind(Container.getNamespaceId(ns)).toService(componentClass);
        });
    }
    activationHandlerWrap(handler) {
        return (context, instance) => {
            return handler({}, instance);
        };
    }
    deactivationHandlerWrap(handler) {
        return (instance) => {
            handler(instance);
        };
    }
    getAll(id) {
        let instances = [];
        try {
            instances = this.inversifyContainer.getAll(id);
        }
        catch (e) {
            if (e.message !== `No matching bindings found for serviceIdentifier: ${id}`) {
                throw new DependencyException(e.message);
            }
        }
        return instances;
    }
    getComponentGroupId(componentId) {
        return 'component-group:' + componentId;
    }
    static getNamespaceId(namespace) {
        return 'namespace:' + namespace;
    }
}
//# sourceMappingURL=container.js.map