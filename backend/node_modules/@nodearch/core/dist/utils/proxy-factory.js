export class ProxyFactory {
    static proxyMethodCall(options) {
        const handler = {
            get: function (target, propKey) {
                const originalMethod = target[propKey];
                if (typeof originalMethod === 'function' && propKey !== 'constructor') {
                    const paramTypes = Reflect.getMetadata('design:paramtypes', target, propKey) || [];
                    return async function (...args) {
                        let result, state = true;
                        if (options.before) {
                            state = await options.before(propKey, args, paramTypes);
                        }
                        if (state) {
                            result = await originalMethod.apply(target, args);
                        }
                        if (options.after && state) {
                            await options.after(propKey, args, paramTypes);
                        }
                        return result;
                    };
                }
                else {
                    return originalMethod;
                }
            }
        };
        return new Proxy(options.target, handler);
    }
}
//# sourceMappingURL=proxy-factory.js.map