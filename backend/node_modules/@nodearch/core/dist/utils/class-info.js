import { inject } from 'inversify';
export class ClassInfo {
    static getMethods(target) {
        const proto = target.prototype;
        if (!proto)
            return [];
        const propertyNames = Object.getOwnPropertyNames(proto) || [];
        return propertyNames
            .filter((propertyName) => {
            const propertyDescriptor = Object.getOwnPropertyDescriptor(proto, propertyName);
            if (propertyDescriptor.set || propertyDescriptor.get) {
                return false;
            }
            return typeof proto[propertyName] === 'function' && propertyName !== 'constructor';
        });
    }
    static propertyInject(target, serviceIdentifier, propertyName, paramIndex) {
        inject(serviceIdentifier)(target.prototype, propertyName, paramIndex);
    }
}
//# sourceMappingURL=class-info.js.map