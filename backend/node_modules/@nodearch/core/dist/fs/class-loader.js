import { FileLoader } from './file-loader.js';
export class ClassLoader {
    constructor(options) {
        this.classes = options.classes || [];
        this.url = options.url;
        this.include = options.include || ['*.js', '*.ts'];
        this.exclude = options.exclude || ['*.d.ts', '*.map'];
        this.depth = options.depth || 10;
    }
    async load() {
        if (this.url) {
            const filesInfo = await FileLoader.getFilesList(this.url, this.depth);
            const filteredFilesInfo = FileLoader.filterFiles(filesInfo, this.include, this.exclude);
            const files = await FileLoader.loadFiles(filteredFilesInfo);
            this.loadClassesFromFiles(files);
        }
    }
    loadClassesFromFiles(filesInfo) {
        filesInfo.forEach(fileInfo => {
            if (fileInfo.content) {
                for (const classDefKey in fileInfo.content) {
                    const item = fileInfo.content[classDefKey];
                    if (typeof item === 'function') {
                        if (!this.classes.find(x => x === item)) {
                            this.classes.push(item);
                        }
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=class-loader.js.map