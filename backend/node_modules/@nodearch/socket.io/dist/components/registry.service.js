var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Logger, Service } from '@nodearch/core';
import { MethodParameters } from '@nodearch/core/components';
import { SocketIODecorator } from '../enums.js';
let RegistryService = class RegistryService {
    constructor(logger) {
        this.logger = logger;
    }
    register(io, namespaceInfo, namespace) {
        namespaceInfo.events.forEach((eventInfo) => {
            const controllerMethod = `${eventInfo.eventComponent.getClass().name}.${eventInfo.eventMethod}`;
            this.logger.info(`Register (${namespaceInfo.name}) (${eventInfo.eventName}) (${controllerMethod})`);
        });
        const nsp = io.of(namespaceInfo.name);
        nsp.use(this.getDefaultMiddleware(namespace));
        nsp.on('connection', (socket) => {
            this.onConnection(socket, namespaceInfo)
                .catch((err) => {
                this.logger.error(err);
                socket.disconnect();
            });
        });
    }
    getDefaultMiddleware(namespace) {
        return (socket, next) => {
            const nsInstance = namespace.getInstance();
            socket.data.nodearch = {
                namespaceInstance: nsInstance
            };
            if (nsInstance.middleware) {
                nsInstance.middleware(socket)
                    .then(() => next())
                    .catch(next);
            }
            else {
                next();
            }
        };
    }
    async onConnection(socket, namespaceInfo) {
        this.logger.info(`New socket connected - (Namespace) ${socket.nsp.name} (ID) ${socket.id}`);
        socket.on('disconnect', () => {
            this.onDisconnect(socket, namespaceInfo);
        });
        const nsInstance = socket.data.nodearch.namespaceInstance;
        const onConnection = nsInstance.onConnection;
        if (onConnection) {
            await onConnection.call(nsInstance, socket);
            if (socket.disconnected) {
                return;
            }
        }
        socket.onAny((eventName, ...args) => {
            this.onAny(socket, namespaceInfo, eventName, ...args);
        });
        namespaceInfo.events.forEach((eventInfo) => {
            const { eventName, eventComponent, eventMethod } = eventInfo;
            const depKey = namespaceInfo.dependenciesKeys.find(x => x.component === eventComponent.getClass()).key;
            const componentInstance = nsInstance[depKey];
            const componentEventHandler = componentInstance[eventMethod].bind(componentInstance);
            socket.on(eventName, this.getEventHandler(socket, namespaceInfo, eventInfo, componentEventHandler));
        });
    }
    async onAny(socket, namespaceInfo, eventName, ...args) {
        const nsInstance = socket.data.nodearch.namespaceInstance;
        const onAny = nsInstance.onAny;
        if (onAny) {
            await onAny.call(nsInstance, eventName, ...args);
        }
        if (!namespaceInfo.events.find(x => x.eventName === eventName)) {
            this.logger.warn(`Event (${eventName}) does not exist in namespace (${namespaceInfo.name})`);
        }
    }
    async onDisconnect(socket, namespaceInfo) {
        this.logger.info(`Socket disconnected - (Namespace) ${socket.nsp.name} (ID) ${socket.id}`);
        const nsInstance = socket.data.nodearch.namespaceInstance;
        const onDisconnect = nsInstance.onDisconnect;
        if (onDisconnect) {
            await onDisconnect.call(nsInstance, socket);
        }
    }
    getEventHandler(socket, namespaceInfo, eventInfo, componentEventHandler) {
        return (...socketArgs) => {
            this.logger.info(`(Event) ${eventInfo.eventName} (Namespace) ${namespaceInfo.name} (Socket ID) ${socket.id}`);
            let ack;
            if (typeof socketArgs[socketArgs.length - 1] === 'function') {
                ack = socketArgs.pop();
            }
            const args = this.getEventHandlerArgs(socket, eventInfo, socketArgs);
            (async () => {
                try {
                    const result = await componentEventHandler(...args);
                    if (ack) {
                        ack(result);
                    }
                }
                catch (err) {
                    if (ack) {
                        ack({
                            error: err.message,
                            data: err.data
                        });
                    }
                    else {
                        this.logger.error(err);
                    }
                }
            })();
        };
    }
    getEventHandlerArgs(socket, eventInfo, socketArgs) {
        const args = MethodParameters.getArguments({
            component: eventInfo.eventComponent,
            method: eventInfo.eventMethod,
            decorators: [
                {
                    id: SocketIODecorator.EVENT_DATA,
                    arg: (data) => data.index !== undefined ? socketArgs[data.index] : socketArgs
                },
                {
                    id: SocketIODecorator.SOCKET_INFO,
                    arg: socket
                }
            ]
        });
        return args;
    }
};
RegistryService = __decorate([
    Service(),
    __metadata("design:paramtypes", [Logger])
], RegistryService);
export { RegistryService };
//# sourceMappingURL=registry.service.js.map