var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Service } from '@nodearch/core';
import { RegistryService } from './registry.service.js';
let ServerPatch = class ServerPatch {
    constructor(registryService) {
        this.registryService = registryService;
        this.patchedNamespaces = [];
    }
    patch(server, namespaceMap) {
        const ofFunc = server.of;
        server.of = (...args) => {
            const namespace = args[0];
            if (typeof namespace === 'string' && !server._nsps.has(namespace)) {
                const dynamicNamespace = this.getDynamicNamespace(namespaceMap, namespace);
                if (dynamicNamespace && !this.patchedNamespaces.includes(dynamicNamespace.namespaceInfo.name)) {
                    this.patchedNamespaces.push(dynamicNamespace.namespaceInfo.name);
                    this.registryService.register(server, dynamicNamespace.namespaceInfo, dynamicNamespace.namespace);
                }
            }
            return ofFunc.apply(server, args);
        };
    }
    getDynamicNamespace(namespaceMap, name) {
        const dynamicNamespace = Array.from(namespaceMap).find(([namespace, namespaceInfo]) => {
            if (namespaceInfo.name instanceof RegExp && name.match(namespaceInfo.name)) {
                return true;
            }
        });
        if (!dynamicNamespace) {
            return null;
        }
        const [namespace, namespaceInfo] = dynamicNamespace;
        return {
            namespace,
            namespaceInfo: {
                ...namespaceInfo,
                name
            }
        };
    }
};
ServerPatch = __decorate([
    Service(),
    __metadata("design:paramtypes", [RegistryService])
], ServerPatch);
export { ServerPatch };
//# sourceMappingURL=server-patches.js.map